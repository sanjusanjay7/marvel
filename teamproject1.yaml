AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a StepFunctions state machine."
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub 'lambda.amazonaws.com'
            Action: "sts:AssumeRole"
    
  OpenCaseFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              // Create a support case using the input as the case ID, then return a confirmation message   
            var myCaseID = event.inputCaseID;
            var myMessage = "Case " + myCaseID + ": opened...";   
            var result = {Case: myCaseID, Message: myMessage};
            callback(null, result);
          };
      Runtime: "nodejs16.x"
      Timeout: "25"
      
  AssignCaseFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {    
              // Assign the support case and update the status message    
            var myCaseID = event.Case;    
            var myMessage = event.Message + "assigned...";    
            var result = {Case: myCaseID, Message: myMessage};
            callback(null, result);
          };
      Runtime: "nodejs14.x"
      Timeout: "25"
      
  WorkOnCaseFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {    
              // Generate a random number to determine whether the support case has been resolved, then return that value along with the updated message.
            var min = 0;
            var max = 1;    
            var myCaseStatus = Math.floor(Math.random() * (max - min + 1)) + min;
            var myCaseID = event.Case;
            var myMessage = event.Message;
            if (myCaseStatus == 1) {
             // Support case has been resolved    
             myMessage = myMessage + "resolved...";
            } else if (myCaseStatus == 0) {
             // Support case is still open
              myMessage = myMessage + "unresolved...";
            } 
            var result = {Case: myCaseID, Status : myCaseStatus, Message: myMessage};
            callback(null, result);
          };
      Runtime: "nodejs16.x" 
      Timeout: "25"
      
  CloseCaseFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => { 
              // Close the support case    
            var myCaseStatus = event.Status;    
            var myCaseID = event.Case;    
            var myMessage = event.Message + "closed.";    
            var result = {Case: myCaseID, Status : myCaseStatus, Message: myMessage};
            callback(null, result);
          };
      Runtime: "nodejs16.x"
      Timeout: "25"
  EscalateCaseFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {    
              // Escalate the support case 
            var myCaseID = event.Case;    
            var myCaseStatus = event.Status;    
            var myMessage = event.Message + "escalating.";    
            var result = {Case: myCaseID, Status : myCaseStatus, Message: myMessage};
            callback(null, result);
          };
      Runtime: "nodejs14.x"
      Timeout: "25"

  StateExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  
  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString: !Sub |
            {
              "Comment": "A simple AWS Step Functions state machine that automates a call center support session.",
              "StartAt": "Open Case",
              "States": {
                "Open Case": {
                  "Type": "Task",
                  "Resource": "${OpenCaseFunction.Arn}",
                  "Next": "Assign Case"
                },
                "Assign Case": {
                  "Type": "Task",
                  "Resource": "${OpenCaseFunction.Arn}",
                  "Next": "Work on Case"
                },
                "Work on Case":{
                  "Type": "Task",
                  "Resource": "${WorkOnCaseFunction.Arn}",
                  "Next": "Is Case Resolved"
                },
                "Is Case Resolved": {
                  "Type" : "Choice",
                "Choices": [
                {
                  "Variable": "$.Status",
                  "NumericEquals": 1,
                  "Next": "Close Case"
                },
                {
                  "Variable": "$.Status",
                  "NumericEquals": 0,
                  "Next": "Escalate Case"
                  }
                 ]
                },
                "Close Case": {
                  "Type": "Task",
                  "Resource": "${CloseCaseFunction.Arn}",
                  "End": true
                },
               "Escalate Case": {
                 "Type": "Task",
                 "Resource": "${EscalateCaseFunction.Arn}",
                 "Next": "Fail"
                },
                "Fail": {
                 "Type": "Fail",
                 "Cause": "Engage Tier 2 Support." }
                }
            }
      RoleArn: !GetAtt [ StateExecutionRole, Arn ]